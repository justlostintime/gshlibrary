Sub plot(pairs as variant[], optional Title as string = "Plotter", xRange as float = 0.0, yRange as float = 0.0, OriginX as float = 0.0, OriginY as float = 0.0) ' Plots a set of points on a graph
''' Plot a set of points on a 2d graph, input a variant array containing integer arrays
''' with two points each

use "gb.gui","gb.image"
component.load("gb.gui")
component.load("gb.image")
class.load("window")
class.load("drawingarea")

Public xytextwidth  as integer = 20
Public WindowWidth  as integer = 600
Public WindowHeight as integer = 600
Public MaxX         as float
MaxX = xRange
Public MaxY         as float
Maxy = yRange
Public OrigX        as float
OrigX = OriginX
Public OrigY        as Float
OrigY = OriginY
Public ScaleX       as float = 1.0
Public ScaleY       as float = 1.0

Public PlotList as variant[]

PlotList = Pairs               '' contains the list of pairs of x,y positions to plot

if MaxX = 0.0 or Maxy = 0.0 then
   SetAutoMax()
endif

dim PlotWindow as new window
PlotWindow.height = WindowHeight
PlotWindow.width = WindowWidth
PlotWindow.title = title
public PlotArea as drawingarea
PlotArea = new DrawingArea(PlotWindow) as "plotter"
PlotArea.x = 10
PlotArea.y = 10
PlotArea.foreground = 0
PlotArea.height = PlotWindow.height-20
PlotArea.Width = PlotWindow.width - 20
Public ySize as integer
ySize = cFloat(PlotArea.height -  xytextwidth)
Public xSize as integer
xsize = cFloat(PlotArea.width  -  xytextwidth)
SetAutoScale()
PlotArea.border = border.etched
PlotArea.refresh()
PlotWindow.Refresh()
PlotWindow.show()
wait

catch
  print error.text, error.where

End
' x = horizontal
' Y = vertical
public sub Plotter_draw()
PrintPlotInfo()
draw.foreground = &h00ff00
draw.line(xytextwidth,PlotArea.height - xytextwidth ,xytextwidth,xytextwidth)
draw.line(xytextwidth,PlotArea.width - xytextwidth ,PlotArea.Height - xytextwidth ,plotarea.width - xytextwidth)
placeTicks()
For each pair as float[] in PlotList
   draw.circle(ScaledX(pair[0]) , ScaledY(pair[0]),2)
next
end

sub PrintPlotInfo() '' print the plot information, size and scale of the plot
print "MaxX,MaxY      :",MaxX,MaxY
Print "ScaleX,ScaleY:",ScaleX,ScaleY
Print "xSize,YSize    :",xSize,ySize
end

Sub SetAutoScale()

ScaleX = cint(xSize / MaxX)
print "Calc ScaleX :", ScaleX,xSize,MaxX
ScaleY = cInt(ySize / MaxY)

end

Sub ScaledX(value as float) as integer     '' scale the X axis to match the value size
    dim xpos as integer = xyTextWidth + cint(value * ScaleX)
    print xpos;;
    return xpos
end

Sub ScaledY(value as float) as integer  '' scale the Y axis to match the value size
   dim ypos as integer =  ySize - cint(value * ScaleX)
   print yPos
   return ypos
end

sub SetAutoMax()                         '' scale the X and Y axis to match the value size
  for each f as float[] in PlotList
   if f[0] > MaxX then MaxX = f[0]
   if f[1] > MaxY then MaxY = f[1]
  next
end

sub placeticks()  '' actually plot the data into the drawing area

for counter as integer = ScaleX+xytextWidth to xSize step Scalex
    draw.line(counter,ySize,counter,ySize+4)
next
draw.text(cstr(MaxX),counter-ScaleX - (Scalex/2),ySize)

for counter = ySize-Scaley Downto 0 step Scaley
    draw.line(xyTextWidth,counter,xyTextWidth-4,counter)
next
draw.text(cstr(MaxY),4,1)
dim OriginText as string = cStr(OrigX) & " - " & cstr(OrigY)
Print "Origin : " & OriginText
draw.text(Origintext,4,ySize)
end