Sub jobs(Optional varname As String = "") As Boolean ' Job Control
''jobs <pid|on|off> prints a list of current background jobs
''          Or turns job control ON or OFF
''
''          This lists all the jobs currently running for a user
''          That is every instance of a task started by gsh for a user
''          Default is all users or provide a pid for specific task
''          pid can equal ON for using job control
''            or        OFF (default) no job control
''          job info can be accessed by Process
''		    using sharedmem["pid.p[processid]"] example sharedmem["pid.p098765"]
extern waitpid(pid As Integer, status As Pointer, options As Integer) As Integer In "libc:6"
extern strerror(errno as integer) as string in "libc:6"
With sharedmem
Dim pidstatus As Integer = 0
Dim pidresult As Integer = 0
Dim pStatus As Pointer = VarPtr(pidstatus)
Dim Jobctl as object = classes["gsh"]
select case upper(varname)
    case "ON"
        object.call(Jobctl,"setjobctl",[true])
    case "OFF"
        object.call(Jobctl,"setjobctl",[false])
    case ""
        For Each s As SharedMemSymbol In SharedMem.SymbolTable
            If s.symname Like "pid.*" Then
                Dim procsyms As String[]
                Dim cmd As String
                procsyms = Split(.[s.symname], "|\n", "", True)
                if procsyms.count >= 3 then
                    cmd = procsyms[2]
                    Print procsyms[0];; procsyms[1];;
                    print "\x1b[33m";
                    If procsyms.count > 3 Then
                        Print procsyms[3];;"\x1b[32m[Complete]\x1b[33m result="; procsyms[4];;"Duration=";(cdate(procsyms[3])-cdate(procsyms[1]))*100000;;
                        .Free(s.symname)
                    Else
                        pidresult = waitpid(CInt(procsyms[0]), pStatus, 1)
                        If pidresult >= 0 Then
                            Print "\x1b[31m[Running]\x1b[33m";;pidstatus;;pidresult;;
                        Else
                            Print "\x1b[31m[Exited]\x1b[33m Status="; pidstatus;;pidresult;;system.error;;strerror(system.error);;
                            .Free(s.symname)
                        Endif
                    Endif
                else
                    print s.Symname;;"[Unknown]";;Process.LastValue;;procsyms.join("|");;
                    .Free(s.symname)
                endif
                print "\x1b[0m";cmd
            Endif
        Next
    default
        If .exist("pid." & varname) Then
            Print .["pid." & varname]
        Else
            .["result"] = "Error : Process ID Not found [" & varname & "]"
            Print #file.err, .["$result"]
            Return False
        Endif
end select
.["result"] = "OK"
End With
Return True
End
