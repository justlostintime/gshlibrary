Sub enumerate(value As String, Optional CheckOnly As Boolean = False) As Variant  ' Bash Style enumeration
'' Will return an enumerated text value as an array of string values
'' much like the bash braced enumeration
'' Example :
'' for each a as integer in $"0..10..2"
''   print a
'' next
'' outputs:
''0
''2
''4
''6
''8
''10
''
'' for each s as string in $"route\t{0..10}\ttimet{0000..1200..1000}"
''   print s
'' next
'' outputs:
''route	00	time	0000
''route	00	time	0100
''route	00	time	0200
''route	00	time	0300
''route	02	time	0000
''route	02	time	0100
''route	02	time	0200
''route	02	time	0300
''route	04	time	0000
''route	04	time	0100
''route	04	time	0200
''route	04	time	0300
''route	06	time	0000
''route	06	time	0100
''route	06	time	0200
''route	06	time	0300
''route	08	time	0000
''route	08	time	0100
''route	08	time	0200
''route	08	time	0300
''route	10	time	0000
''route	10	time	0100
''route	10	time	0200
''route	10	time	0300


' If value Not Like "*\\{*\\}*" Or If value Not Like "*[\\*~\\/]*" Or If value Not Like "*{./}*" Or If value <> "." Then
'     Return IIf(CheckOnly = True, False, Null)
' Endif

'If checkonly = True Then Return True
 Dim expandsets As String[] = Split(value, " ", "''", True, True)
 Dim FirstSet As String[]
 Dim intermresults As New String[]
 For Each eitem As String In expandsets
   FirstSet = enumerateloop(eitem)
   If FirstSet.count = 0 Then Continue
   Dim TestValue As String = FirstSet[0]
   If TestValue Not Like "*[\\*~\\/]*" And TestValue Not Like "*{./}*" And TestValue <> "." Then
      IntermResults.Insert(firstset)
   Else
    For Each sGlob As String In FirstSet
       IntermResults.Insert(fileexpand(sGlob))
    Next
   Endif
 Next
 Return IntermResults
 End


 Sub enumerateloop(value As String) As String[] ' loop here until completed

 Dim finalresult As New String[]

 Dim leftbrace, rightbrace As Integer
 leftbrace = InStr(value, "{")
 rightbrace = matchbrace(value, leftbrace)
 If leftbrace > 0 Then
   If rightbrace = 0 Then
     Error.Raise("Enumeration missing right } " & Quote(value))
   Endif
   Dim sLeft As String = Left(value, leftbrace - 1)
   Dim sRight As String = Right(value, -rightbrace)
   Dim sEnum As String = Mid(value, leftbrace + 1, rightbrace - leftbrace - 1)
 Else
   sLeft = ""
   sRight = ""
   sEnum = value
 Endif

 Dim result As String[]
 result = getenum(sEnum)
 For i As Integer = 0 To result.Max
   Dim newvalue As String = sleft & result[i] & sright
   If InStr(newvalue, "{") Then
     finalresult.Insert(enumerateloop(newvalue))
   Else
     If Not IsNull(newvalue) Then finalresult.Add(newvalue)
   Endif
 Next
 Return finalresult
End

Sub matchbrace(src As String, start As Integer) As Integer
  Dim level As Integer = 1
  Inc start
  For i As Integer = start To src.len - 1
    If src[i] = "{" Then Inc level
    If src[i] = "}" Then Dec level
    If level = 0 Then Return i + 1  ' we are working with strings
  Next

  Return 0

End

Sub getenum(enumdef As String) As String[]
  Dim toEnum As String[] = Split(enumdef, ", ", "{}", True, True)
  Dim result As New String[]
  For Each s As String In toEnum
    If InStr(s, "{") Then
      result.Insert(enumerate(s))
    Else If InStr(s, "..") Then
      Dim enumset As String[] = Split(s, ".", "", True)
      Dim enumStart As String = enumset[0]
      Dim enumend As String = enumset[1]
      Dim nStep As Integer = 0
      If enumset.count = 3 Then
         nStep = enumset[2]
      endif

      If IsNumber(EnumStart) Then
        dim PatternLength as integer = 0                 ' we must pad with leading zeros when asked
        dim Pattern as string = ""
        if EnumStart[0] = "0" or if EnumEnd[0]="0" Then
          PatternLength = max(EnumStart.len,EnumEnd.len)
          Pattern = string(PatternLength,"0")
        endif
        Dim nStart As Integer = EnumStart
        Dim nEnd As Integer = EnumEnd
        if nstep = 0 Then
          nStep = IIf(nStart < nEnd, 1, -1)
        endif

        For i As Integer = nStart To nEnd Step nStep
          if PatternLength > 0 Then
            result.add(format(i,Pattern))
          Else
            result.Add(i)
          endif
        Next

      Else

        Dim bStart As Byte = CByte(Asc(EnumStart, 1))
        Dim bEnd As Byte = CByte(Asc(EnumEnd, 1))
        if nStep = 0 then
          nStep = IIf(bStart < bEnd, 1, -1)
        endif
        For b As Byte = bStart To bEnd Step nStep
          result.Add(Chr(b))
        Next

      Endif
    Else
      result.Add(s)
    Endif
  Next
  Return result

End